
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDErightNOTrightUMINUSAND COMMENT DIVIDE EQ FALSE GE GT LE LPAREN LT MINUS NE NOT NUMBER OR PLUS RPAREN TIMES TRUEexpression : arithmetic_expression\n                  | logical_expression\n                  | comparison_expressionarithmetic_expression : arithmetic_expression PLUS arithmetic_expression\n                             | arithmetic_expression MINUS arithmetic_expression\n                             | arithmetic_expression TIMES arithmetic_expression\n                             | arithmetic_expression DIVIDE arithmetic_expression\n                             | LPAREN arithmetic_expression RPAREN\n                             | MINUS arithmetic_expression %prec UMINUS\n                             | NUMBERlogical_expression : logical_expression AND logical_expression\n                         | logical_expression OR logical_expression\n                         | NOT logical_expression\n                         | LPAREN logical_expression RPAREN\n                         | comparison_expressioncomparison_expression : arithmetic_expression LT arithmetic_expression\n                             | arithmetic_expression LE arithmetic_expression\n                             | arithmetic_expression GT arithmetic_expression\n                             | arithmetic_expression GE arithmetic_expression\n                             | arithmetic_expression EQ arithmetic_expression\n                             | arithmetic_expression NE arithmetic_expressionexpression : expression COMMENT\n                  | COMMENT expression\n                  | COMMENT'
    
_lr_action_items = {'COMMENT':([0,1,2,3,4,5,8,10,23,24,28,29,32,33,34,35,36,37,38,39,40,41,42,43,45,46,],[5,10,-1,-2,-3,5,-10,-22,10,-9,-15,-13,-4,-5,-6,-7,-16,-17,-18,-19,-20,-21,-11,-12,-8,-14,]),'LPAREN':([0,5,6,7,9,11,12,13,14,15,16,17,18,19,20,21,22,25,30,],[7,7,25,7,30,25,25,25,25,25,25,25,25,25,25,30,30,25,30,]),'MINUS':([0,2,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,30,31,32,33,34,35,36,37,38,39,40,41,44,45,],[6,12,6,6,6,-10,6,6,6,6,6,6,6,6,6,6,6,6,6,-9,6,12,6,12,-4,-5,-6,-7,12,12,12,12,12,12,12,-8,]),'NUMBER':([0,5,6,7,9,11,12,13,14,15,16,17,18,19,20,21,22,25,30,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NOT':([0,5,7,9,21,22,30,],[9,9,9,9,9,9,9,]),'$end':([1,2,3,4,5,8,10,23,24,28,29,32,33,34,35,36,37,38,39,40,41,42,43,45,46,],[0,-1,-2,-3,-24,-10,-22,-23,-9,-15,-13,-4,-5,-6,-7,-16,-17,-18,-19,-20,-21,-11,-12,-8,-14,]),'PLUS':([2,8,24,26,31,32,33,34,35,36,37,38,39,40,41,44,45,],[11,-10,-9,11,11,-4,-5,-6,-7,11,11,11,11,11,11,11,-8,]),'TIMES':([2,8,24,26,31,32,33,34,35,36,37,38,39,40,41,44,45,],[13,-10,-9,13,13,13,13,-6,-7,13,13,13,13,13,13,13,-8,]),'DIVIDE':([2,8,24,26,31,32,33,34,35,36,37,38,39,40,41,44,45,],[14,-10,-9,14,14,14,14,-6,-7,14,14,14,14,14,14,14,-8,]),'LT':([2,8,24,26,31,32,33,34,35,45,],[15,-10,-9,15,15,-4,-5,-6,-7,-8,]),'LE':([2,8,24,26,31,32,33,34,35,45,],[16,-10,-9,16,16,-4,-5,-6,-7,-8,]),'GT':([2,8,24,26,31,32,33,34,35,45,],[17,-10,-9,17,17,-4,-5,-6,-7,-8,]),'GE':([2,8,24,26,31,32,33,34,35,45,],[18,-10,-9,18,18,-4,-5,-6,-7,-8,]),'EQ':([2,8,24,26,31,32,33,34,35,45,],[19,-10,-9,19,19,-4,-5,-6,-7,-8,]),'NE':([2,8,24,26,31,32,33,34,35,45,],[20,-10,-9,20,20,-4,-5,-6,-7,-8,]),'AND':([3,4,8,24,27,28,29,32,33,34,35,36,37,38,39,40,41,42,43,45,46,],[21,-15,-10,-9,21,-15,-13,-4,-5,-6,-7,-16,-17,-18,-19,-20,-21,-11,21,-8,-14,]),'OR':([3,4,8,24,27,28,29,32,33,34,35,36,37,38,39,40,41,42,43,45,46,],[22,-15,-10,-9,22,-15,-13,-4,-5,-6,-7,-16,-17,-18,-19,-20,-21,-11,-12,-8,-14,]),'RPAREN':([8,24,26,27,28,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,],[-10,-9,45,46,-15,-13,-4,-5,-6,-7,-16,-17,-18,-19,-20,-21,-11,-12,45,-8,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,],[1,23,]),'arithmetic_expression':([0,5,6,7,9,11,12,13,14,15,16,17,18,19,20,21,22,25,30,],[2,2,24,26,31,32,33,34,35,36,37,38,39,40,41,31,31,44,26,]),'logical_expression':([0,5,7,9,21,22,30,],[3,3,27,29,42,43,27,]),'comparison_expression':([0,5,7,9,21,22,30,],[4,4,28,28,28,28,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> arithmetic_expression','expression',1,'p_expression','parser.py',18),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',19),
  ('expression -> comparison_expression','expression',1,'p_expression','parser.py',20),
  ('arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',25),
  ('arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',26),
  ('arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',27),
  ('arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',28),
  ('arithmetic_expression -> LPAREN arithmetic_expression RPAREN','arithmetic_expression',3,'p_arithmetic_expression','parser.py',29),
  ('arithmetic_expression -> MINUS arithmetic_expression','arithmetic_expression',2,'p_arithmetic_expression','parser.py',30),
  ('arithmetic_expression -> NUMBER','arithmetic_expression',1,'p_arithmetic_expression','parser.py',31),
  ('logical_expression -> logical_expression AND logical_expression','logical_expression',3,'p_logical_expression','parser.py',54),
  ('logical_expression -> logical_expression OR logical_expression','logical_expression',3,'p_logical_expression','parser.py',55),
  ('logical_expression -> NOT logical_expression','logical_expression',2,'p_logical_expression','parser.py',56),
  ('logical_expression -> LPAREN logical_expression RPAREN','logical_expression',3,'p_logical_expression','parser.py',57),
  ('logical_expression -> comparison_expression','logical_expression',1,'p_logical_expression','parser.py',58),
  ('comparison_expression -> arithmetic_expression LT arithmetic_expression','comparison_expression',3,'p_comparison_expression','parser.py',73),
  ('comparison_expression -> arithmetic_expression LE arithmetic_expression','comparison_expression',3,'p_comparison_expression','parser.py',74),
  ('comparison_expression -> arithmetic_expression GT arithmetic_expression','comparison_expression',3,'p_comparison_expression','parser.py',75),
  ('comparison_expression -> arithmetic_expression GE arithmetic_expression','comparison_expression',3,'p_comparison_expression','parser.py',76),
  ('comparison_expression -> arithmetic_expression EQ arithmetic_expression','comparison_expression',3,'p_comparison_expression','parser.py',77),
  ('comparison_expression -> arithmetic_expression NE arithmetic_expression','comparison_expression',3,'p_comparison_expression','parser.py',78),
  ('expression -> expression COMMENT','expression',2,'p_expression_ignore_comment','parser.py',93),
  ('expression -> COMMENT expression','expression',2,'p_expression_ignore_comment','parser.py',94),
  ('expression -> COMMENT','expression',1,'p_expression_ignore_comment','parser.py',95),
]
